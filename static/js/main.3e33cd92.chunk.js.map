{"version":3,"sources":["img/start.svg","img/pause.svg","img/stop.svg","utils/convertMs.js","components/Input/index.js","components/Lap/index.js","components/Button/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","convertMs","ms","tenMilliseconds","Math","round","slice","seconds","minutes","concat","Input","_this$props","this","props","className","type","value","size","onChange","react_default","a","createElement","React","Component","Lap","e","_this","lap","time","onRemove","prevTime","duration","components_Input","name","length","onClick","Button","disabled","children","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startTimer","setState","state","start","Date","now","lapStart","lapTime","isOn","timer","setInterval","stopTimer","lapName","clearInterval","newLap","id","shortId","generate","stops","prevState","laps","toConsumableArray","resetTimer","changeLapName","lapId","newLaps","index","findIndex","target","changeCurrentLapName","removeLap","filter","_this2","components_Button","es","src","PauseImage","StartImage","reset","ResetImage","total","i","map","components_Lap","key","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e33cd92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/start.eb5f0947.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.2859155c.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop.05b0922d.svg\";","/**\n * Convert ms to 'mm:ss:10ms'\n */\nexport function convertMs(ms) {\n  let tenMilliseconds = (\"0\" + (Math.round(ms/10) % 100)).slice(-2);\n  let seconds = (\"0\" + (Math.round(ms/1000) % 60)).slice(-2);\n  let minutes = (\"0\" + (Math.round(ms/60000) % 60)).slice(-2);\n\n  return(\n    `${minutes}:${seconds}:${tenMilliseconds}`\n  )\n}","/**\n * Input\n */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\nclass Input extends React.Component {\n  render() {\n    const {\n      className,\n      type,\n      value,\n      size,\n      onChange,\n    } = this.props;\n\n    return (\n      <input\n        className={className}\n        type={type}\n        value={value}\n        size={size}\n        onChange={onChange}\n      />\n    );\n  }\n}\n\nInput.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  size: PropTypes.number,\n  onChange: PropTypes.func,\n};\n\nexport default Input;\n","/**\n * LapItem\n */\n\nimport PropTypes from \"prop-types\";\nimport React from 'react';\nimport { convertMs } from '../../utils/convertMs';\nimport Input from \"../Input\";\nimport './styles.css';\n\nconst propTypes = {\n  lap: PropTypes.shape({\n    id: PropTypes.string,\n    prevTime: PropTypes.number,\n    time: PropTypes.number,\n    duration: PropTypes.number,\n    name: PropTypes.text,\n  }),\n  onChange: PropTypes.func,\n  onRemove: PropTypes.func,\n};\n\nclass Lap extends React.Component {\n  onChange = (e) => {\n    this.props.onChange(e, this.props.lap.time);\n  };\n\n  onRemove = () => {\n    this.props.onRemove(this.props.lap.time);\n  };\n\n  render() {\n    return (\n      <tr className='timer__lap'>\n        <td className='lap__item lap__interval'>{convertMs(this.props.lap.prevTime)} - {convertMs(this.props.lap.time)}</td>\n        <td className='lap__item lap__duration'><b>{convertMs(this.props.lap.duration)}</b></td>\n        <td><Input\n          className='lap__item lap__name'\n          type=\"text\"\n          value={this.props.lap.name}\n          size={this.props.lap.name.length}\n          onChange={this.props.onChange}\n        /></td>\n        <td className='lap__item lap__remove' onClick={this.props.onRemove}> X </td>\n      </tr>\n    );\n  }\n}\n\nLap.propTypes = propTypes;\n\nexport default Lap;","/**\n * Button\n */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\nclass Button extends React.Component {\n  render() {\n    const {\n      className,\n      onClick,\n      disabled,\n      children,\n    } = this.props;\n\n    return (\n      <button\n        className={`btn ${className}`}\n        onClick={onClick}\n        disabled={disabled}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport shortId from 'shortid';\nimport SVG from 'react-inlinesvg';\nimport { convertMs } from './utils/convertMs';\nimport Lap from \"./components/Lap\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport './App.css';\nimport StartImage from './img/start.svg';\nimport PauseImage from './img/pause.svg';\nimport ResetImage from './img/stop.svg';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      time: 0,\n      lapTime: 0,\n      start: 0,\n      lapStart: 0,\n      isOn: false,\n      stops: [0],\n      laps: [],\n      lapName: 'Lap'\n    };\n  }\n\n  startTimer = () => {\n    this.setState({\n      time: this.state.time,\n      start: Date.now() - this.state.time,\n      lapStart: Date.now() - this.state.lapTime,\n      isOn: true,\n    });\n    this.timer = setInterval(() => {\n      this.setState({\n        time: Date.now() - this.state.start,\n        lapTime: Date.now() - this.state.lapStart,\n      })\n    }, 10);\n  };\n\n  stopTimer = () => {\n    this.setState({\n      isOn: false,\n      lapTime: 0,\n      lapName: 'Lap'\n    });\n    clearInterval(this.timer);\n\n    let newLap = {\n      id: shortId.generate(),\n      prevTime: this.state.stops[this.state.stops.length - 1],\n      time: this.state.time,\n      duration: this.state.lapTime,\n      name: this.state.lapName\n    };\n\n    this.setState((prevState) => ({\n      laps: [...prevState.laps, newLap],\n      stops: [...prevState.stops, this.state.time]\n    }));\n  };\n\n  resetTimer = () => {\n    this.setState({\n      time: 0,\n      stops: [0],\n      laps: [],\n      lapName: 'Lap'\n    });\n  };\n\n  changeLapName = (lapId, e) => {\n    const newLaps = this.state.laps.slice();\n    const index = newLaps.findIndex(lap => lap.id === lapId);\n\n    newLaps[index].name = e.target.value;\n\n    this.setState({\n      laps: newLaps,\n    });\n  };\n\n  changeCurrentLapName = (e) => {\n    this.setState({lapName: e.target.value});\n  };\n\n  removeLap = (lapId) => {\n    const prevLap = this.state.laps.slice();\n    const newLap = prevLap.filter((newLap) => newLap.id !== lapId);\n    this.setState({\n      laps: newLap\n    });\n  };\n\n  render() {\n    let start = !this.state.isOn ?\n      <Button onClick={this.startTimer} children={<SVG src={StartImage} className='icon__start' />} /> :\n      <Button onClick={this.stopTimer} children={<SVG src={PauseImage} className='icon__pause' />} />;\n\n    let reset = <Button onClick={this.resetTimer} children={<SVG src={ResetImage} className='icon__reset' />} disabled={this.state.time === 0 && !this.state.isOn}/>;\n\n    const { laps } = this.state;\n    let total = 0;\n    for (let i = 0; i < laps.length; i++) {\n      total += laps[i].duration\n    }\n\n    return(\n      <div className='timer__container'>\n        <div className='timer__time'>{convertMs(this.state.time)}</div>\n        <div className=\"timer__wrap\">\n          <div className='timer__current-lap'>\n            <span className='timer__current-lap-time'>{convertMs(this.state.lapTime)}</span>\n            <Input\n              className='timer__current-lap-name'\n              type=\"text\"\n              value={this.state.lapName}\n              size={this.state.lapName.length}\n              onChange={this.changeCurrentLapName}\n            />\n          </div>\n        </div>\n        <div className='timer__controls'>\n          {start}\n          {reset}\n        </div>\n        <table className='timer__laps'>\n          <tbody>\n            {laps.map((lap) => (\n              <Lap key={lap.id} lap={lap} onChange={(e) => this.changeLapName(lap.id, e)} onRemove={() => this.removeLap(lap.id)} />\n            ))}\n          </tbody>\n          {laps.length > 0 &&\n            <tfoot><tr>\n              <td style={{textAlign: 'right'}}>total: </td>\n              <td className='timer__total'>{convertMs(total)}</td>\n            </tr></tfoot>\n          }\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}